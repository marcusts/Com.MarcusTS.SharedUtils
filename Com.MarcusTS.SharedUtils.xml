<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Com.MarcusTS.SharedUtils</name>
    </assembly>
    <members>
        <member name="T:Com.MarcusTS.SharedUtils.Controls.IDecideWhichIsLess`1">
            <summary>
               Interface IDecideWhichIsLess
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.IDecideWhichIsLess`1.IsLessThan(`0,`0)">
            <summary>
               Determines whether [is less than] [the specified main item].
            </summary>
            <param name="mainItem">The main item.</param>
            <param name="compareItem">The compare item.</param>
            <returns><c>true</c> if [is less than] [the specified main item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Controls.BetterObservableCollection`1">
            <summary>
               Class BetterObservableCollection.
               Implements the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.ObjectModel.ObservableCollection`1" />
        </member>
        <member name="F:Com.MarcusTS.SharedUtils.Controls.BetterObservableCollection`1._suppressNotification">
            <summary>
               The suppress notification
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.BetterObservableCollection`1.#ctor(`0[])">
            <summary>
               Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedUtils.Controls.BetterObservableCollection`1" /> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.BetterObservableCollection`1.#ctor">
            <summary>
               Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedUtils.Controls.BetterObservableCollection`1" /> class.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.BetterObservableCollection`1.AddRangeSortedAndWithoutNotification(`0[],Com.MarcusTS.SharedUtils.Controls.IDecideWhichIsLess{`0})">
            <summary>
               Adds the range sorted and without notification.
            </summary>
            <param name="list">The list.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.BetterObservableCollection`1.AddSorted(`0,Com.MarcusTS.SharedUtils.Controls.IDecideWhichIsLess{`0})">
            <summary>
               Adds the sorted.
            </summary>
            <param name="item">The item.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.BetterObservableCollection`1.NotifyOfAdditions(`0[])">
            <summary>
               Notifies the of additions.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.BetterObservableCollection`1.Sort(`0[])">
            <summary>
               Sorts the specified sorted.
            </summary>
            <param name="sorted">The sorted.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.BetterObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
               Handles the <see cref="E:CollectionChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Controls.FlexibleStack`1">
            <summary>
               Class FlexibleStack.
               Implements the <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="F:Com.MarcusTS.SharedUtils.Controls.FlexibleStack`1._items">
            <summary>
               The items
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.FlexibleStack`1.GetEnumerator">
            <summary>
               Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.FlexibleStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
               Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
               An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the
               collection.
            </returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.FlexibleStack`1.Clear">
            <summary>
               Clears this instance.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.FlexibleStack`1.Peek">
            <summary>
               Peeks this instance.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.FlexibleStack`1.Pop">
            <summary>
               Pops this instance.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.FlexibleStack`1.Push(`0)">
            <summary>
               Pushes the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.FlexibleStack`1.RemoveIfPresent(`0,System.Predicate{`0})">
            <summary>
               Removes if present.
            </summary>
            <param name="item">The item.</param>
            <param name="dupTest">The dup test.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.FlexibleStack`1.PopOrPeek(System.Boolean)">
            <summary>
               Pops the or peek.
            </summary>
            <param name="removeIt">if set to <c>true</c> [remove it].</param>
            <returns>T.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Controls.IThreadSafeAccessor">
            <summary>
               Interface IThreadSafeAccessor
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.IThreadSafeAccessor.ReadStoredValue">
            <summary>
               Reads the stored value.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.IThreadSafeAccessor.WriteStoredValue(System.Object)">
            <summary>
               Writes the stored value.
            </summary>
            <param name="valueToStore">The value to store.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Controls.ThreadSafeAccessor">
            <summary>
               Class ThreadSafeAccessor.
               Implements the <see cref="T:Com.MarcusTS.SharedUtils.Controls.IThreadSafeAccessor" />
               Implements the <see cref="T:Com.MarcusTS.SharedUtils.Controls.IThreadSafeAccessor" />
            </summary>
            <seealso cref="T:Com.MarcusTS.SharedUtils.Controls.IThreadSafeAccessor" />
            <seealso cref="T:Com.MarcusTS.SharedUtils.Controls.IThreadSafeAccessor" />
        </member>
        <member name="F:Com.MarcusTS.SharedUtils.Controls.ThreadSafeAccessor._storedValue">
            <summary>
               The stored value
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.ThreadSafeAccessor.#ctor(System.Object)">
            <summary>
               Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedUtils.Controls.ThreadSafeAccessor" /> class.
            </summary>
            <param name="storedValue">The stored value.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.ThreadSafeAccessor.ReadStoredValue">
            <summary>
               Reads the stored value.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Controls.ThreadSafeAccessor.WriteStoredValue(System.Object)">
            <summary>
               Writes the stored value.
            </summary>
            <param name="valueToStore">The value to store.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager">
            <summary>
               Copied from (internal) Xamarin.Forms  to make it publicly accessible.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager._eventHandlers">
            <summary>
               The event handlers
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager.AddEventHandler``1(System.EventHandler{``0},System.String)">
            <summary>
               Adds the event handler.
            </summary>
            <typeparam name="TEventArgs">The type of the t event arguments.</typeparam>
            <param name="handler">The handler.</param>
            <param name="eventName">Name of the event.</param>
            <exception cref="T:System.ArgumentNullException">
               eventName
               or
               handler
            </exception>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager.AddEventHandler(System.EventHandler,System.String)">
            <summary>
               Adds the event handler.
            </summary>
            <param name="handler">The handler.</param>
            <param name="eventName">Name of the event.</param>
            <exception cref="T:System.ArgumentNullException">
               eventName
               or
               handler
            </exception>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager.HandleEvent(System.Object,System.Object,System.String)">
            <summary>
               Handles the event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The arguments.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager.RemoveEventHandler``1(System.EventHandler{``0},System.String)">
            <summary>
               Removes the event handler.
            </summary>
            <typeparam name="TEventArgs">The type of the t event arguments.</typeparam>
            <param name="handler">The handler.</param>
            <param name="eventName">Name of the event.</param>
            <exception cref="T:System.ArgumentNullException">
               eventName
               or
               handler
            </exception>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager.RemoveEventHandler(System.EventHandler,System.String)">
            <summary>
               Removes the event handler.
            </summary>
            <param name="handler">The handler.</param>
            <param name="eventName">Name of the event.</param>
            <exception cref="T:System.ArgumentNullException">
               eventName
               or
               handler
            </exception>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager.AddEventHandler(System.String,System.Object,System.Reflection.MethodInfo)">
            <summary>
               Adds the event handler.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="handlerTarget">The handler target.</param>
            <param name="methodInfo">The method information.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager.RemoveEventHandler(System.String,System.Object,System.Reflection.MemberInfo)">
            <summary>
               Removes the event handler.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="handlerTarget">The handler target.</param>
            <param name="methodInfo">The method information.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager.Subscription">
            <summary>
               Struct Subscription
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager.Subscription.Handler">
            <summary>
               The handler
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager.Subscription.Subscriber">
            <summary>
               The subscriber
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager.Subscription.#ctor(System.WeakReference,System.Reflection.MethodInfo)">
            <summary>
               Initializes a new instance of the <see cref="T:Com.MarcusTS.SharedUtils.Events.CustomWeakEventManager.Subscription" /> struct.
            </summary>
            <param name="subscriber">The subscriber.</param>
            <param name="handler">The handler.</param>
            <exception cref="T:System.ArgumentNullException">handler</exception>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Utils.ErrorUtils">
            <summary>
               Class ErrorUtils.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.ErrorUtils.ConsiderArgumentError(System.Boolean,System.String)">
            <summary>
               Considers the argument error.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.ErrorUtils.ThrowArgumentError(System.String)">
            <summary>
               Throws the argument error.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Utils.EventUtils">
            <summary>
               Class EventUtils.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Utils.EventUtils.GenericDelegate`1">
            <summary>
               Delegate GenericDelegate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val">The value.</param>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Utils.EventUtils.GenericDelegateTask`1">
            <summary>
               Delegate GenericDelegateTask
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val">The value.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Utils.EventUtils.NoParamsDelegate">
            <summary>
               Delegate NoParamsDelegate
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Utils.EventUtils.NoParamsDelegateTask">
            <summary>
               Delegate NoParamsDelegateTask
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.EventUtils.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
               Raises the specified sender.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.EventUtils.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
               Raises the specified sender.
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.EventUtils.RaiseOnDifferentThread``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
               Raises the on different thread.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.EventUtils.RaiseOnDifferentThread(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
               Raises the on different thread.
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.EventUtils.StartNewOnDifferentThread(System.Threading.Tasks.TaskFactory,System.Action)">
            <summary>
               Starts the new on different thread.
            </summary>
            <param name="taskFactory">The task factory.</param>
            <param name="action">The action.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Utils.Extensions">
            <summary>
               Class Extensions.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedUtils.Utils.Extensions.DECIMAL">
            <summary>
               The decimal
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedUtils.Utils.Extensions.ZERO_CHAR">
            <summary>
               The zero character
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedUtils.Utils.Extensions.NUMERIC_ERROR">
            <summary>
               The numeric error
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedUtils.Utils.Extensions.GLOBAL_RANDOM">
            <summary>
               The global random
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedUtils.Utils.Extensions.EmptyNullableBool">
            <summary>
               Gets a value indicating whether [empty nullable bool].
            </summary>
            <value>
               <c>null</c> if [empty nullable bool] contains no value, <c>true</c> if [empty nullable bool]; otherwise,
               <c>false</c>.
            </value>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.AddOrUpdate``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,``1)">
            <summary>
               Adds the or update.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="retDict">The ret dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.AnySettablePropertyHasChanged``1(``0,``0,System.String,System.Reflection.PropertyInfo[])">
            <summary>
               Determines if two collections of properties contain the same actual values. Can be called
               for a single property using the optional parameter.
            </summary>
            <typeparam name="T">The type of class which is being evaluated for changes.</typeparam>
            <param name="mainViewModel">The main class for comparison.</param>
            <param name="otherViewModel">The secondary class for comparison.</param>
            <param name="singlePropertyName">If set, this will be the only property interrogated.</param>
            <param name="propInfos">The property info collection that will be analyzed for changes.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.CleanUpServiceErrorText(System.String)">
            <summary>
               Cleans up service error text.
            </summary>
            <param name="errorText">The error text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.CopySettablePropertyValuesFrom``1(``0,``0,System.Reflection.PropertyInfo[])">
            <summary>
               Copy the values from the specified properties from value to target.
            </summary>
            <typeparam name="T">*Unused* -- required for referencing only.</typeparam>
            <param name="targetViewModel">The view model to copy *to*.</param>
            <param name="valueViewModel">The view model to copy *from*.</param>
            <param name="propInfos">The property info records to use to get and set values.</param>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.GetAllPropInfos``1">
            <summary>
               Gets all property infos.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>PropertyInfo[].</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.GetDifferences``1(``0[],``0[])">
            <summary>
               Gets the differences.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mainList">The main list.</param>
            <param name="secondList">The second list.</param>
            <returns>System.ValueTuple&lt;IList&lt;T&gt;, IList&lt;T&gt;&gt;.</returns>
            <return>
               The differences between the two lists:
               * First tuple -- the main list items not in the second list
               * Second tuple -- the second list items not fond in the main list
            </return>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.GetEnumCount``1">
            <summary>
               Gets the enum count.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>System.Int32.</returns>
            <exception cref="T:System.Exception">Not enum</exception>
            <exception cref="T:System.Exception">Not enum</exception>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.GetRuntimeWriteableProperties(System.Type)">
            <summary>
               Gets the properties for a type that have a public setter.
            </summary>
            <param name="type">The type being analyzed.</param>
            <returns>The public settable property info's for this type.</returns>
            <remarks>This method is NOT THREAD SAFE due to the list add.</remarks>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.GetStringFromObject(System.Object)">
            <summary>
               Gets the string from object.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.HasNoValue(System.Nullable{System.Double})">
            <summary>
               Determines whether [has no value] [the specified database].
            </summary>
            <param name="db">The database.</param>
            <returns><c>true</c> if [has no value] [the specified database]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsAnEmptyList(System.Collections.IList)">
            <summary>
               Determines whether [is an empty list] [the specified list].
            </summary>
            <param name="list">The list.</param>
            <returns><c>true</c> if [is an empty list] [the specified list]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsAnEmptyList(System.Collections.IEnumerable)">
            <summary>
               Determines whether [is an empty list] [the specified list].
            </summary>
            <param name="list">The list.</param>
            <returns><c>true</c> if [is an empty list] [the specified list]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsAnEqualObjectTo(System.Object,System.Object)">
            <summary>
               Determines whether [is an equal object to] [the specified compare object].
            </summary>
            <param name="mainObj">The main object.</param>
            <param name="compareObj">The compare object.</param>
            <returns><c>true</c> if [is an equal object to] [the specified compare object]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsAnEqualReferenceTo``1(``0,``0)">
            <summary>
               Determines whether [is an equal reference to] [the specified compare object].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mainObj">The main object.</param>
            <param name="compareObj">The compare object.</param>
            <returns><c>true</c> if [is an equal reference to] [the specified compare object]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsDifferentThan(System.DateTime,System.DateTime)">
            <summary>
               Determines whether [is different than] [the specified other date time].
            </summary>
            <param name="mainDateTime">The main date time.</param>
            <param name="otherDateTime">The other date time.</param>
            <returns><c>true</c> if [is different than] [the specified other date time]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsDifferentThan(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
               Determines whether [is different than] [the specified other d].
            </summary>
            <param name="mainD">The main d.</param>
            <param name="otherD">The other d.</param>
            <returns><c>true</c> if [is different than] [the specified other d]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsDifferentThan(System.Double,System.Double)">
            <summary>
               Determines whether [is different than] [the specified other d].
            </summary>
            <param name="mainD">The main d.</param>
            <param name="otherD">The other d.</param>
            <returns><c>true</c> if [is different than] [the specified other d]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsDifferentThan(System.Single,System.Single)">
            <summary>
               Determines whether [is different than] [the specified other f].
            </summary>
            <param name="mainF">The main f.</param>
            <param name="otherF">The other f.</param>
            <returns><c>true</c> if [is different than] [the specified other f]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsDifferentThan(System.String,System.String)">
            <summary>
               Determines whether [is different than] [the specified other string].
            </summary>
            <param name="mainStr">The main string.</param>
            <param name="otherStr">The other string.</param>
            <returns><c>true</c> if [is different than] [the specified other string]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsDifferentThan``1(``0[],``0[])">
            <summary>
               Determines whether [is different than] [the specified second list].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mainList">The main list.</param>
            <param name="secondList">The second list.</param>
            <returns><c>true</c> if [is different than] [the specified second list]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsEmpty(System.DateTime)">
            <summary>
               Determines whether the specified main date time is empty.
            </summary>
            <param name="mainDateTime">The main date time.</param>
            <returns><c>true</c> if the specified main date time is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
               Determines whether the specified list is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns><c>true</c> if the specified list is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsEmpty(System.Double)">
            <summary>
               Determines whether the specified main d is empty.
            </summary>
            <param name="mainD">The main d.</param>
            <returns><c>true</c> if the specified main d is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsEmpty(System.String)">
            <summary>
               Determines whether the specified string is empty.
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if the specified string is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsGreaterThan(System.Double,System.Double,System.Double)">
            <summary>
               Determines whether [is greater than] [the specified other d].
            </summary>
            <param name="thisD">The this d.</param>
            <param name="otherD">The other d.</param>
            <param name="numericError">The numeric error.</param>
            <returns><c>true</c> if [is greater than] [the specified other d]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsGreaterThanOrEqualTo(System.Double,System.Double,System.Double)">
            <summary>
               Determines whether [is greater than or equal to] [the specified other d].
            </summary>
            <param name="thisD">The this d.</param>
            <param name="otherD">The other d.</param>
            <param name="numericError">The numeric error.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified other d]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsLessThan(System.Double,System.Double,System.Double)">
            <summary>
               Determines whether [is less than] [the specified other d].
            </summary>
            <param name="thisD">The this d.</param>
            <param name="otherD">The other d.</param>
            <param name="numericError">The numeric error.</param>
            <returns><c>true</c> if [is less than] [the specified other d]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsLessThanOrEqualTo(System.Double,System.Double,System.Double)">
            <summary>
               Determines whether [is less than or equal to] [the specified other d].
            </summary>
            <param name="thisD">The this d.</param>
            <param name="otherD">The other d.</param>
            <param name="numericError">The numeric error.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified other d]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsNonNullRegexMatch(System.String,System.String)">
            <summary>
               Determines whether [is non null regex match] [the specified regex].
            </summary>
            <param name="s">The s.</param>
            <param name="regex">The regex.</param>
            <returns><c>true</c> if [is non null regex match] [the specified regex]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsNotAnEmptyList(System.Collections.IList)">
            <summary>
               Determines whether [is not an empty list] [the specified list].
            </summary>
            <param name="list">The list.</param>
            <returns><c>true</c> if [is not an empty list] [the specified list]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsNotAnEmptyList(System.Collections.IEnumerable)">
            <summary>
               Determines whether [is not an empty list] [the specified list].
            </summary>
            <param name="list">The list.</param>
            <returns><c>true</c> if [is not an empty list] [the specified list]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsNotAnEqualObjectTo(System.Object,System.Object)">
            <summary>
               Determines whether [is not an equal object to] [the specified compare object].
            </summary>
            <param name="mainObj">The main object.</param>
            <param name="compareObj">The compare object.</param>
            <returns><c>true</c> if [is not an equal object to] [the specified compare object]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsNotAnEqualReferenceTo``1(``0,``0)">
            <summary>
               Determines whether [is not an equal reference to] [the specified compare object].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mainObj">The main object.</param>
            <param name="compareObj">The compare object.</param>
            <returns><c>true</c> if [is not an equal reference to] [the specified compare object]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsNotEmpty(System.DateTime)">
            <summary>
               Determines whether [is not empty] [the specified main date time].
            </summary>
            <param name="mainDateTime">The main date time.</param>
            <returns><c>true</c> if [is not empty] [the specified main date time]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
               Determines whether [is not empty] [the specified list].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns><c>true</c> if [is not empty] [the specified list]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsNotEmpty(System.Double)">
            <summary>
               Determines whether [is not empty] [the specified main d].
            </summary>
            <param name="mainD">The main d.</param>
            <returns><c>true</c> if [is not empty] [the specified main d]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsNotEmpty(System.String)">
            <summary>
               Determines whether [is not empty] [the specified string].
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if [is not empty] [the specified string]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsNotNullOrDefault``1(``0)">
            <summary>
               Determines whether [is not null or default] [the specified main object].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mainObj">The main object.</param>
            <returns><c>true</c> if [is not null or default] [the specified main object]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsNotTheSame(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
               Determines whether [is not the same] [the specified second].
            </summary>
            <param name="first">if set to <c>true</c> [first].</param>
            <param name="second">if set to <c>true</c> [second].</param>
            <returns><c>true</c> if [is not the same] [the specified second]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsNullOrDefault``1(``0)">
            <summary>
               Determines whether [is null or default] [the specified main object].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mainObj">The main object.</param>
            <returns><c>true</c> if [is null or default] [the specified main object]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsReallyNull(System.String)">
            <summary>
               Determines whether [is really null] [the specified text].
            </summary>
            <param name="text">The text.</param>
            <returns><c>true</c> if [is really null] [the specified text]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsSameAs(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
               Determines whether [is same as] [the specified other d].
            </summary>
            <param name="mainD">The main d.</param>
            <param name="otherD">The other d.</param>
            <returns><c>true</c> if [is same as] [the specified other d]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsSameAs``1(``0[],``0[])">
            <summary>
               Determines whether [is same as] [the specified second list].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mainList">The main list.</param>
            <param name="secondList">The second list.</param>
            <returns><c>true</c> if [is same as] [the specified second list]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsSameAs(System.DateTime,System.DateTime)">
            <summary>
               Determines whether [is same as] [the specified other date time].
            </summary>
            <param name="mainDateTime">The main date time.</param>
            <param name="otherDateTime">The other date time.</param>
            <returns><c>true</c> if [is same as] [the specified other date time]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsSameAs(System.Double,System.Double,System.Double)">
            <summary>
               Determines whether [is same as] [the specified other d].
            </summary>
            <param name="mainD">The main d.</param>
            <param name="otherD">The other d.</param>
            <param name="numericError">The numeric error.</param>
            <returns><c>true</c> if [is same as] [the specified other d]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsSameAs(System.Single,System.Single,System.Double)">
            <summary>
               Determines whether [is same as] [the specified other f].
            </summary>
            <param name="mainF">The main f.</param>
            <param name="otherF">The other f.</param>
            <param name="numericError">The numeric error.</param>
            <returns><c>true</c> if [is same as] [the specified other f]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsSameAs(System.String,System.String)">
            <summary>
               Determines whether [is same as] [the specified other string].
            </summary>
            <param name="mainStr">The main string.</param>
            <param name="otherStr">The other string.</param>
            <returns><c>true</c> if [is same as] [the specified other string]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsTrue(System.Nullable{System.Boolean})">
            <summary>
               Determines whether the specified b is true.
            </summary>
            <param name="b">if set to <c>true</c> [b].</param>
            <returns><c>true</c> if the specified b is true; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.IsTypeOrAssignableFromType(System.Type,System.Type)">
            <summary>
               Determines whether [is type or assignable from type] [the specified target type].
            </summary>
            <param name="mainType">Type of the main.</param>
            <param name="targetType">Type of the target.</param>
            <returns><c>true</c> if [is type or assignable from type] [the specified target type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.MinOfTwoDoubles(System.Double,System.Double)">
            <summary>
               Minimums the of two doubles.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.PositionOfDecimal(System.String)">
            <summary>
               Positions the of decimal.
            </summary>
            <param name="str">The string.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.RandomString(System.String[],System.Boolean)">
            <summary>
               Randoms the string.
            </summary>
            <param name="strings">The strings.</param>
            <param name="emptyOK"></param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.ReverseDictionary``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1})">
            <summary>
               Reverses the dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="template">The template.</param>
            <returns>ConcurrentDictionary&lt;U, T&gt;.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.RoundToInt(System.Double)">
            <summary>
               Rounds to int.
            </summary>
            <param name="floatVal">The float value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.ToRoundedInt(System.Double)">
            <summary>
               Converts to roundedint.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.ToRoundedLong(System.Double)">
            <summary>
               Converts to roundedlong.
            </summary>
            <param name="d">The d.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.Extensions.TryToGetKeyValue(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
               Returns the value for a key, if that key exists in the dictionary.
            </summary>
            <param name="dict">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
            <remarks>This is *not* thread safe</remarks>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Utils.GCUtils">
            <summary>
               Class GCUtils.
            </summary>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.GCUtils.TriggerGC">
            <summary>
               Triggers the gc.
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Utils.GlobalConstants">
            <summary>
               Class GlobalConstants.
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedUtils.Utils.GlobalConstants.TOOL_BAR_BUTTON_CORNER_RADIUS_FACTOR">
            <summary>
               The tool bar button corner radius factor
            </summary>
        </member>
        <member name="F:Com.MarcusTS.SharedUtils.Utils.GlobalConstants.NEXT_SELECTION_GROUP">
            <summary>
               The next selection group
            </summary>
        </member>
        <member name="T:Com.MarcusTS.SharedUtils.Utils.ThreadHelper">
            <summary>
               Class ThreadHelper.
            </summary>
        </member>
        <member name="P:Com.MarcusTS.SharedUtils.Utils.ThreadHelper.IsOnMainThread">
            <summary>
               Gets a value indicating whether this instance is on main thread.
            </summary>
            <value><c>true</c> if this instance is on main thread; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Com.MarcusTS.SharedUtils.Utils.ThreadHelper.MainThreadId">
            <summary>
               Gets the main thread identifier.
            </summary>
            <value>The main thread identifier.</value>
        </member>
        <member name="M:Com.MarcusTS.SharedUtils.Utils.ThreadHelper.Initialize(System.Int32)">
            <summary>
               Initializes the specified main thread identifier.
            </summary>
            <param name="mainThreadId">The main thread identifier.</param>
        </member>
    </members>
</doc>
